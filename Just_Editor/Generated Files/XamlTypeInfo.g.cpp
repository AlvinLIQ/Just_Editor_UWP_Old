//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "CaesarPanel.xaml.h"
#include "CodeEditor.xaml.h"
#include "DuronSmartDetect.xaml.h"
#include "DuronWindowItemxaml.xaml.h"
#include "DuronWordItem.xaml.h"
#include "NewFileDialog.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "RecentListItem.xaml.h"
#include "RenameDialog.xaml.h"
#include "StartPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "CaesarPanel.g.hpp"
#include "CodeEditor.g.hpp"
#include "DuronSmartDetect.g.hpp"
#include "DuronWindowItemxaml.g.hpp"
#include "DuronWordItem.g.hpp"
#include "NewFileDialog.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "RecentListItem.g.hpp"
#include "RenameDialog.g.hpp"
#include "StartPage.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_StartIndex(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->StartIndex);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_isSmartDetectEnabled(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->isSmartDetectEnabled);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_isChanged(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->isChanged);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_isSelected(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->isSelected);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_ItemIndex(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->ItemIndex);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_wordRange(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->wordRange;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_SelectedWord(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->SelectedWord;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_SelectedItem(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->SelectedItem;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_thisWindowItem(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->thisWindowItem;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_FrameContent(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->FrameContent;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ItemFile(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ItemFile;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_OriginalText(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->OriginalText;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_FileName(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->FileName;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_FilePath(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->FilePath;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_OverBrush(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->OverBrush;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Identifier(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Identifier;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Token(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Token;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_StartIndex(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->StartIndex = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_isSmartDetectEnabled(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->isSmartDetectEnabled = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_isChanged(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->isChanged = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_isSelected(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->isSelected = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_ItemIndex(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ItemIndex = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_wordRange(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->wordRange = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SelectedWord(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SelectedWord = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SelectedItem(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SelectedItem = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_thisWindowItem(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->thisWindowItem = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_FrameContent(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->FrameContent = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ItemFile(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ItemFile = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_OriginalText(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->OriginalText = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_FileName(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->FileName = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_FilePath(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->FilePath = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_OverBrush(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->OverBrush = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Identifier(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Identifier = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Token(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Token = safe_cast<TValue^>(value);
}

enum TypeInfo_Flags
{
    TypeInfo_Flags_None                 = 0x00,
    TypeInfo_Flags_IsLocalType          = 0x01,
    TypeInfo_Flags_IsSystemType         = 0x02,
    TypeInfo_Flags_IsReturnTypeStub     = 0x04,
    TypeInfo_Flags_IsBindable           = 0x08,
    TypeInfo_Flags_IsMarkupExtension    = 0x10, 
};

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    unsigned int flags;
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   1
    L"UInt32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   3
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   4
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   5
    L"Just_Editor.MainPage", L"",
    &ActivateType<::Just_Editor::MainPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //   6
    L"Just_Editor.StartPage", L"",
    &ActivateType<::Just_Editor::StartPage>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //   7
    L"Just_Editor.CodeEditor", L"",
    &ActivateType<::Just_Editor::CodeEditor>, nullptr, nullptr, nullptr,
    17, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //   8
    L"Just_Editor.CaesarPanel", L"",
    &ActivateType<::Just_Editor::CaesarPanel>, nullptr, nullptr, nullptr,
    19, // Windows.UI.Xaml.Controls.UserControl
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //   9
    L"Just_Editor.RenameDialog", L"",
    &ActivateType<::Just_Editor::RenameDialog>, nullptr, nullptr, nullptr,
    20, // Windows.UI.Xaml.Controls.ContentDialog
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  10
    L"Just_Editor.DuronWordItem", L"",
    &ActivateType<::Just_Editor::DuronWordItem>, nullptr, nullptr, nullptr,
    19, // Windows.UI.Xaml.Controls.UserControl
    3, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  11
    L"Just_Editor.NewFileDialog", L"",
    &ActivateType<::Just_Editor::NewFileDialog>, nullptr, nullptr, nullptr,
    20, // Windows.UI.Xaml.Controls.ContentDialog
    7, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  12
    L"Windows.UI.Text.ITextRange", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    //  13
    L"Just_Editor.RecentListItem", L"",
    &ActivateType<::Just_Editor::RecentListItem>, nullptr, nullptr, nullptr,
    19, // Windows.UI.Xaml.Controls.UserControl
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  14
    L"Windows.Storage.StorageFile", L"",
    nullptr, nullptr, nullptr, nullptr,
    3, // Object
    11, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    //  15
    L"Windows.UI.Xaml.Media.Brush", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    11, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  16
    L"Just_Editor.DuronSmartDetect", L"",
    &ActivateType<::Just_Editor::DuronSmartDetect>, nullptr, nullptr, nullptr,
    19, // Windows.UI.Xaml.Controls.UserControl
    11, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  17
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    15, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  18
    L"Just_Editor.DuronWindowItemxaml", L"",
    &ActivateType<::Just_Editor::DuronWindowItemxaml>, nullptr, nullptr, nullptr,
    19, // Windows.UI.Xaml.Controls.UserControl
    15, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  19
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  20
    L"Windows.UI.Xaml.Controls.ContentDialog", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  21
    L"Windows.UI.Xaml.Controls.ContentControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_None,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      4,   //   7
      5,   //   8
      5,   //   9
      5,   //  10
      5,   //  11
      5,   //  12
      5,   //  13
      5,   //  14
      5,   //  15
      5,   //  16
      5,   //  17
      5,   //  18
      5,   //  19
      5,   //  20
      6,   //  21
      7,   //  22
      8,   //  23
      9,   //  24
     10,   //  25
     12,   //  26
     14,   //  27
     16,   //  28
     17,   //  29
     18,   //  30
     18,   //  31
     19,   //  32
     19,   //  33
     19,   //  34
     19,   //  35
     19,   //  36
     20,   //  37
     20,   //  38
     21,   //  39
     22,   //  40
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - Just_Editor.CodeEditor.isSmartDetectEnabled
    L"isSmartDetectEnabled",
    &GetValueTypeMember_isSmartDetectEnabled<::Just_Editor::CodeEditor, ::Platform::Boolean>,
    &SetValueTypeMember_isSmartDetectEnabled<::Just_Editor::CodeEditor, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //   1 - Just_Editor.CodeEditor.thisWindowItem
    L"thisWindowItem",
    &GetReferenceTypeMember_thisWindowItem<::Just_Editor::CodeEditor>,
    &SetReferenceTypeMember_thisWindowItem<::Just_Editor::CodeEditor, ::Just_Editor::DuronWindowItemxaml>,
    18, // Just_Editor.DuronWindowItemxaml
    -1,
    false, false, false,
    //   2 - Just_Editor.RenameDialog.FileName
    L"FileName",
    &GetReferenceTypeMember_FileName<::Just_Editor::RenameDialog>,
    &SetReferenceTypeMember_FileName<::Just_Editor::RenameDialog, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   3 - Just_Editor.DuronWordItem.ItemIndex
    L"ItemIndex",
    &GetValueTypeMember_ItemIndex<::Just_Editor::DuronWordItem, ::default::int32>,
    &SetValueTypeMember_ItemIndex<::Just_Editor::DuronWordItem, ::default::int32>,
    0, // Int32
    -1,
    false, false, false,
    //   4 - Just_Editor.DuronWordItem.OverBrush
    L"OverBrush",
    &GetReferenceTypeMember_OverBrush<::Just_Editor::DuronWordItem>,
    &SetReferenceTypeMember_OverBrush<::Just_Editor::DuronWordItem, ::Windows::UI::Xaml::Media::Brush>,
    15, // Windows.UI.Xaml.Media.Brush
    -1,
    false, false, false,
    //   5 - Just_Editor.DuronWordItem.Identifier
    L"Identifier",
    &GetReferenceTypeMember_Identifier<::Just_Editor::DuronWordItem>,
    &SetReferenceTypeMember_Identifier<::Just_Editor::DuronWordItem, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   6 - Just_Editor.DuronWordItem.isSelected
    L"isSelected",
    &GetValueTypeMember_isSelected<::Just_Editor::DuronWordItem, ::Platform::Boolean>,
    &SetValueTypeMember_isSelected<::Just_Editor::DuronWordItem, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //   7 - Just_Editor.NewFileDialog.FileName
    L"FileName",
    &GetReferenceTypeMember_FileName<::Just_Editor::NewFileDialog>,
    &SetReferenceTypeMember_FileName<::Just_Editor::NewFileDialog, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   8 - Just_Editor.RecentListItem.Token
    L"Token",
    &GetReferenceTypeMember_Token<::Just_Editor::RecentListItem>,
    &SetReferenceTypeMember_Token<::Just_Editor::RecentListItem, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   9 - Just_Editor.RecentListItem.FilePath
    L"FilePath",
    &GetReferenceTypeMember_FilePath<::Just_Editor::RecentListItem>,
    &SetReferenceTypeMember_FilePath<::Just_Editor::RecentListItem, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  10 - Just_Editor.RecentListItem.FileName
    L"FileName",
    &GetReferenceTypeMember_FileName<::Just_Editor::RecentListItem>,
    &SetReferenceTypeMember_FileName<::Just_Editor::RecentListItem, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  11 - Just_Editor.DuronSmartDetect.wordRange
    L"wordRange",
    &GetReferenceTypeMember_wordRange<::Just_Editor::DuronSmartDetect>,
    &SetReferenceTypeMember_wordRange<::Just_Editor::DuronSmartDetect, ::Windows::UI::Text::ITextRange>,
    12, // Windows.UI.Text.ITextRange
    -1,
    false, false, false,
    //  12 - Just_Editor.DuronSmartDetect.StartIndex
    L"StartIndex",
    &GetValueTypeMember_StartIndex<::Just_Editor::DuronSmartDetect, ::default::uint32>,
    &SetValueTypeMember_StartIndex<::Just_Editor::DuronSmartDetect, ::default::uint32>,
    1, // UInt32
    -1,
    false, false, false,
    //  13 - Just_Editor.DuronSmartDetect.SelectedWord
    L"SelectedWord",
    &GetReferenceTypeMember_SelectedWord<::Just_Editor::DuronSmartDetect>,
    &SetReferenceTypeMember_SelectedWord<::Just_Editor::DuronSmartDetect, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  14 - Just_Editor.DuronSmartDetect.SelectedItem
    L"SelectedItem",
    &GetReferenceTypeMember_SelectedItem<::Just_Editor::DuronSmartDetect>,
    &SetReferenceTypeMember_SelectedItem<::Just_Editor::DuronSmartDetect, ::Just_Editor::DuronWordItem>,
    10, // Just_Editor.DuronWordItem
    -1,
    false, false, false,
    //  15 - Just_Editor.DuronWindowItemxaml.isChanged
    L"isChanged",
    &GetValueTypeMember_isChanged<::Just_Editor::DuronWindowItemxaml, ::Platform::Boolean>,
    &SetValueTypeMember_isChanged<::Just_Editor::DuronWindowItemxaml, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //  16 - Just_Editor.DuronWindowItemxaml.isSelected
    L"isSelected",
    &GetValueTypeMember_isSelected<::Just_Editor::DuronWindowItemxaml, ::Platform::Boolean>,
    &SetValueTypeMember_isSelected<::Just_Editor::DuronWindowItemxaml, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //  17 - Just_Editor.DuronWindowItemxaml.FrameContent
    L"FrameContent",
    &GetReferenceTypeMember_FrameContent<::Just_Editor::DuronWindowItemxaml>,
    &SetReferenceTypeMember_FrameContent<::Just_Editor::DuronWindowItemxaml, ::Platform::Object>,
    3, // Object
    -1,
    false, false, false,
    //  18 - Just_Editor.DuronWindowItemxaml.ItemFile
    L"ItemFile",
    &GetReferenceTypeMember_ItemFile<::Just_Editor::DuronWindowItemxaml>,
    &SetReferenceTypeMember_ItemFile<::Just_Editor::DuronWindowItemxaml, ::Windows::Storage::StorageFile>,
    14, // Windows.Storage.StorageFile
    -1,
    false, false, false,
    //  19 - Just_Editor.DuronWindowItemxaml.OriginalText
    L"OriginalText",
    &GetReferenceTypeMember_OriginalText<::Just_Editor::DuronWindowItemxaml>,
    &SetReferenceTypeMember_OriginalText<::Just_Editor::DuronWindowItemxaml, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  20 - Just_Editor.DuronWindowItemxaml.FileName
    L"FileName",
    &GetReferenceTypeMember_FileName<::Just_Editor::DuronWindowItemxaml>,
    &SetReferenceTypeMember_FileName<::Just_Editor::DuronWindowItemxaml, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  21 - Just_Editor.DuronWindowItemxaml.FilePath
    L"FilePath",
    &GetReferenceTypeMember_FilePath<::Just_Editor::DuronWindowItemxaml>,
    &SetReferenceTypeMember_FilePath<::Just_Editor::DuronWindowItemxaml, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    auto typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    auto lastDotIndex = longMemberName->Length();
    while (true)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
        if (lastDotIndex == 0)
        {
            break;
        }
        lastDotIndex--;
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->flags & TypeInfo_Flags_IsSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->flags & TypeInfo_Flags_IsLocalType;
        userType->IsReturnTypeStub = pTypeInfo->flags & TypeInfo_Flags_IsReturnTypeStub;
        userType->IsBindable = pTypeInfo->flags & TypeInfo_Flags_IsBindable;
        userType->IsMarkupExtension = pTypeInfo->flags & TypeInfo_Flags_IsMarkupExtension;
        userType->CreateFromStringMethod = nullptr;
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

